// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  funnels       Funnel[]
  contacts      Contact[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Funnel {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stages      Stage[]
  contacts    Contact[]

  @@index([userId])
}

model Stage {
  id        String    @id @default(cuid())
  name      String
  color     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  funnelId  String
  funnel    Funnel    @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  contacts  Contact[]

  @@index([funnelId])
}

model Contact {
  id              String        @id @default(cuid())
  name            String
  phone           String
  email           String?
  avatar          String?
  status          String        // needs_response, in_conversation, waiting_client, resolved
  lastActivity    DateTime      @default(now())
  unreadCount     Int           @default(0)
  addedAt         DateTime      @default(now())
  serviceInterest String?
  priority        String?       // low, medium, high
  estimatedValue  Float?
  lastContactDate DateTime?
  closingDate     DateTime?
  channel         String?
  value           Float?
  notes           String?
  stageId         String
  stage           Stage         @relation(fields: [stageId], references: [id])
  funnelId        String
  funnel          Funnel        @relation(fields: [funnelId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        Message[]

  @@index([stageId])
  @@index([funnelId])
  @@index([userId])
}

model Message {
  id           String   @id @default(cuid())
  content      String
  timestamp    DateTime @default(now())
  isFromContact Boolean
  isRead       Boolean  @default(false)
  contactId    String
  contact      Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId])
}
