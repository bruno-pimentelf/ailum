// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // Relação com a clínica
  clinic        Clinic?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelo para Clínica (usuário principal do sistema)
model Clinic {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com usuário (para autenticação)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relações com outros modelos
  staff       Staff[]
  patients    Patient[]
  funnels     Funnel[]
  
  // Relação com instância do WhatsApp
  whatsappInstance WhatsappInstance?
}

// Modelo para Equipe da Clínica (secretárias, médicos, etc.)
model Staff {
  id          String   @id @default(cuid())
  name        String
  email       String
  role        String   // "secretary", "doctor", "admin", etc.
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com a clínica
  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  // Relações com outros modelos
  patientNotes PatientNote[]
}

// Modelo para Pacientes (contatos)
model Patient {
  id            String   @id @default(cuid())
  name          String
  phone         String   // Número do WhatsApp
  email         String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Campos adicionais
  serviceInterest String?
  estimatedValue  Float?
  lastContactDate DateTime?
  closingDate     DateTime?
  channel         String?  // "Indicação", "Redes Sociais", etc.
  
  // Relação com a clínica
  clinicId      String
  clinic        Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  // Relações com outros modelos
  funnelStage   FunnelStage? @relation(fields: [funnelStageId], references: [id])
  funnelStageId String?
  notes         PatientNote[]
  
  // Status do contato
  status        String   @default("needs_response") // "needs_response", "in_conversation", "waiting_client", "resolved"
  priority      String   @default("medium") // "low", "medium", "high"
  
  // Campos para integração com WhatsApp
  whatsappId    String?  @unique // ID do contato no WhatsApp
  unreadCount   Int      @default(0)
  lastActivity  DateTime @default(now())
  
  // Relação com mensagens
  messages      Message[]
}

// Modelo para Funis
model Funnel {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com a clínica
  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  // Relações com outros modelos
  stages      FunnelStage[]
}

// Modelo para Etapas do Funil
model FunnelStage {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  color       String   @default("bg-blue-500")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com o funil
  funnelId    String
  funnel      Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  
  // Relações com outros modelos
  patients    Patient[]
}

// Modelo para Anotações sobre Pacientes
model PatientNote {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relação com o paciente
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Relação com o membro da equipe que criou a nota
  staffId     String
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

// Modelo para Mensagens
model Message {
  id            String   @id @default(cuid())
  content       String
  mediaUrl      String?  // Para mensagens com mídia (imagens, áudios, etc.)
  mediaType     String?  // Tipo de mídia: image, audio, video, document
  timestamp     DateTime @default(now())
  isFromPatient Boolean  @default(true)
  isRead        Boolean  @default(false)
  
  // Identificador externo da mensagem no WhatsApp
  whatsappMessageId String? @unique
  
  // Relação com o paciente
  patientId     String
  patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@index([patientId])
}

// NOVOS MODELOS PARA INTEGRAÇÃO COM EVOLUTION API

// Modelo para Instância do WhatsApp
model WhatsappInstance {
  id              String   @id @default(cuid())
  instanceName    String   @unique // Nome da instância na Evolution API
  apiKey          String   // Hash/API Key da instância
  status          String   @default("disconnected") // disconnected, connecting, connected, error
  qrCode          String?  @db.Text // QR Code em base64 para conexão
  qrCodeExpiry    DateTime? // Data de expiração do QR Code
  phoneNumber     String?  // Número de telefone conectado
  lastConnection  DateTime? // Última vez que esteve conectado
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relação com a clínica
  clinicId        String   @unique
  clinic          Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  // Relação com configurações
  config          WhatsappConfig?
  webhook         WhatsappWebhook?
  security        WhatsappSecurity?
  
  // Logs de conexão
  connectionLogs  WhatsappConnectionLog[]
}

// Modelo para Configurações do WhatsApp
model WhatsappConfig {
  id                    String   @id @default(cuid())
  autoReconnect         Boolean  @default(true)
  notificationsEnabled  Boolean  @default(true)
  messageRetentionDays  Int      @default(30) // Dias para manter mensagens
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relação com a instância
  instanceId            String   @unique
  instance              WhatsappInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

// Modelo para Configuração de Webhook
model WhatsappWebhook {
  id              String   @id @default(cuid())
  url             String   // URL para envio de eventos
  enabled         Boolean  @default(true)
  events          String[] // Eventos a serem enviados: message, status, etc.
  secret          String?  // Chave secreta para validação
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relação com a instância
  instanceId      String   @unique
  instance        WhatsappInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  
  // Logs de webhook
  webhookLogs     WhatsappWebhookLog[]
}

// Modelo para Configurações de Segurança
model WhatsappSecurity {
  id                String   @id @default(cuid())
  proxyEnabled      Boolean  @default(false)
  proxyUrl          String?
  ipWhitelist       String[] // IPs permitidos
  maxDevices        Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relação com a instância
  instanceId        String   @unique
  instance          WhatsappInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

// Modelo para Logs de Conexão
model WhatsappConnectionLog {
  id              String   @id @default(cuid())
  event           String   // connect, disconnect, qr_code, error
  details         String?  @db.Text
  timestamp       DateTime @default(now())
  
  // Relação com a instância
  instanceId      String
  instance        WhatsappInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  
  @@index([instanceId])
}

// Modelo para Logs de Webhook
model WhatsappWebhookLog {
  id              String   @id @default(cuid())
  event           String   // Tipo de evento enviado
  payload         String   @db.Text // Payload enviado
  responseStatus  Int?     // Código de status da resposta
  responseBody    String?  @db.Text // Corpo da resposta
  success         Boolean
  timestamp       DateTime @default(now())
  
  // Relação com o webhook
  webhookId       String
  webhook         WhatsappWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@index([webhookId])
}
